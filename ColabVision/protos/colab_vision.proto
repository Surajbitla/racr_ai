syntax = "proto3";


service colab_vision {
    // the upload should be stream later
    rpc uploadFile(stream Chunk) returns (Ack);
    rpc uploadImage(stream Chunk) returns (Dict); 
    rpc downloadFile(uuid) returns (stream Chunk);
    rpc resultTimeDownload(uuid) returns (result_Time_Dict);
    rpc constantInference(stream Info_Chunk) returns (stream Info_Chunk);
}

// must sent that it is starting new inference
// bytes of inference to perform
// mark when inference complete
// receive results


message Info_Chunk{
    enum Action {
        ACT_UNK = 0; //noop
        ACT_RESET = 1; //start new inference package.
        ACT_Y_APPEND = 2; //indicates the previous chunks are to be stored for future inference.
        ACT_INFERENCE = 3; //indicates inference can begin.
    }
    Chunk chunk = 1;
    repeated Action action = 2;
    int32 layer = 3; //layer the chunks belong to. Inference would result in tensor for layer + 1. Layer of 0 indicates that an image is being sent.
}

message Dict{
    bytes chunk = 1;
}

message Chunk{
    bytes chunk = 1;
    // expect one but not both of the below
    // oneof test_oneof {
    //       File_Metadata meta = 2;
    //       bytes chunk = 1;
    // }
}

message uuid{
    string id = 1;
}

message result_Time_Dict{
    string dict = 1;
}

message File_Metadata{
 string auth = 1;
 string file_format = 2;
}

message Ack{
    int32 code = 1;
    string id = 2;
}
